"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/booking",{

/***/ "./utils/supabase.ts":
/*!***************************!*\
  !*** ./utils/supabase.ts ***!
  \***************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   checkVillaAvailability: function() { return /* binding */ checkVillaAvailability; },\n/* harmony export */   createBooking: function() { return /* binding */ createBooking; },\n/* harmony export */   getSupabaseClient: function() { return /* binding */ getSupabaseClient; },\n/* harmony export */   getVillaById: function() { return /* binding */ getVillaById; },\n/* harmony export */   loadMockData: function() { return /* binding */ loadMockData; },\n/* harmony export */   testSupabaseConnection: function() { return /* binding */ testSupabaseConnection; }\n/* harmony export */ });\n/* harmony import */ var _supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @supabase/supabase-js */ \"./node_modules/@supabase/supabase-js/dist/module/index.js\");\n\n// Mock data for fallback when Supabase isn't available\nlet mockVillas = [];\nlet mockBookings = [];\n// Try to initialize Supabase client with environment variables\nlet supabaseUrl;\nlet supabaseKey;\nlet supabaseClient = null;\n// Handle the case when running in the browser where window is defined\nif (true) {\n    supabaseUrl = \"https://strvmujzcfzqaqoksnlh.supabase.co\";\n    supabaseKey = \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InN0cnZtdWp6Y2Z6cWFxb2tzbmxoIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDE4NTY3NDEsImV4cCI6MjA1NzQzMjc0MX0.JNKAXzQAHbk9uxrBITPoII_qk2TD5aLSwMtnk5fGzao\";\n    console.log(\"Supabase config:\", {\n        urlDefined: !!supabaseUrl,\n        keyDefined: !!supabaseKey,\n        urlValue: supabaseUrl ? supabaseUrl.substring(0, 8) + \"...\" : \"undefined\",\n        keyValue: supabaseKey ? supabaseKey.substring(0, 5) + \"...\" : \"undefined\"\n    });\n    // Load mock data if needed\n    try {\n        // In Next.js, you can't directly use fs in the browser,\n        // so we'll load mock data from an API endpoint if needed\n        if (!supabaseUrl || !supabaseKey) {\n            console.warn(\"Missing Supabase credentials, will use mock data\");\n        } else {\n            // Initialize Supabase client if credentials are available\n            supabaseClient = (0,_supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__.createClient)(supabaseUrl, supabaseKey);\n            console.log(\"Supabase client initialized successfully\");\n        }\n    } catch (error) {\n        console.error(\"Error initializing Supabase:\", error);\n    }\n}\n// Initialize Supabase client if we have valid credentials\nif (supabaseUrl && supabaseKey) {\n    supabaseClient = (0,_supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__.createClient)(supabaseUrl, supabaseKey);\n}\n// Utility function to get the Supabase client\nconst getSupabaseClient = ()=>{\n    if (!supabaseClient) {\n        // Return mock client if actual client isn't available\n        return {\n            from: (table)=>{\n                return {\n                    select: (columns)=>{\n                        return {\n                            data: table === \"villas\" ? mockVillas : mockBookings,\n                            error: null,\n                            // Mock supabase query methods\n                            eq: (column, value)=>{\n                                let filtered = [];\n                                if (table === \"villas\") {\n                                    filtered = mockVillas.filter((item)=>item[column] === value);\n                                } else if (table === \"bookings\") {\n                                    filtered = mockBookings.filter((item)=>item[column] === value);\n                                }\n                                return {\n                                    data: filtered,\n                                    error: null,\n                                    single: ()=>{\n                                        return {\n                                            data: filtered.length > 0 ? filtered[0] : null,\n                                            error: filtered.length > 0 ? null : {\n                                                message: \"Not found\"\n                                            }\n                                        };\n                                    }\n                                };\n                            }\n                        };\n                    },\n                    insert: (data)=>{\n                        const newItem = {\n                            id: \"mock-\".concat(Date.now()),\n                            created_at: new Date().toISOString(),\n                            ...data\n                        };\n                        if (table === \"villas\") {\n                            mockVillas.push(newItem);\n                        } else if (table === \"bookings\") {\n                            mockBookings.push(newItem);\n                        }\n                        return {\n                            data: newItem,\n                            error: null\n                        };\n                    },\n                    update: (data)=>{\n                        return {\n                            match: (param)=>{\n                                let { id } = param;\n                                if (table === \"villas\") {\n                                    const index = mockVillas.findIndex((item)=>item.id === id);\n                                    if (index !== -1) {\n                                        mockVillas[index] = {\n                                            ...mockVillas[index],\n                                            ...data\n                                        };\n                                        return {\n                                            data: mockVillas[index],\n                                            error: null\n                                        };\n                                    }\n                                } else if (table === \"bookings\") {\n                                    const index = mockBookings.findIndex((item)=>item.id === id);\n                                    if (index !== -1) {\n                                        mockBookings[index] = {\n                                            ...mockBookings[index],\n                                            ...data\n                                        };\n                                        return {\n                                            data: mockBookings[index],\n                                            error: null\n                                        };\n                                    }\n                                }\n                                return {\n                                    data: null,\n                                    error: {\n                                        message: \"Item not found\"\n                                    }\n                                };\n                            }\n                        };\n                    },\n                    delete: ()=>{\n                        return {\n                            match: (param)=>{\n                                let { id } = param;\n                                if (table === \"villas\") {\n                                    const index = mockVillas.findIndex((item)=>item.id === id);\n                                    if (index !== -1) {\n                                        const deleted = mockVillas[index];\n                                        mockVillas.splice(index, 1);\n                                        return {\n                                            data: deleted,\n                                            error: null\n                                        };\n                                    }\n                                } else if (table === \"bookings\") {\n                                    const index = mockBookings.findIndex((item)=>item.id === id);\n                                    if (index !== -1) {\n                                        const deleted = mockBookings[index];\n                                        mockBookings.splice(index, 1);\n                                        return {\n                                            data: deleted,\n                                            error: null\n                                        };\n                                    }\n                                }\n                                return {\n                                    data: null,\n                                    error: {\n                                        message: \"Item not found\"\n                                    }\n                                };\n                            }\n                        };\n                    }\n                };\n            }\n        };\n    }\n    return supabaseClient;\n};\nconst supabase = getSupabaseClient();\n/* harmony default export */ __webpack_exports__[\"default\"] = (supabase);\n// Helper function to fetch a villa by ID\nasync function getVillaById(id) {\n    try {\n        if (supabaseClient) {\n            // Use type assertion to satisfy TypeScript\n            const query = supabase.from(\"villas\").select(\"*\");\n            const { data, error } = await query.eq(\"id\", id).single();\n            if (error) {\n                console.error(\"Error fetching villa:\", error);\n                return null;\n            }\n            return data;\n        } else {\n            // For mock implementation\n            const villa = mockVillas.find((v)=>v.id === id);\n            return villa || null;\n        }\n    } catch (error) {\n        console.error(\"Error fetching villa:\", error);\n        return null;\n    }\n}\n// Helper function to create a new booking\nasync function createBooking(bookingData) {\n    try {\n        console.log(\"Submitting booking data to Supabase:\", bookingData);\n        if (supabaseClient) {\n            console.log(\"Using real Supabase client for booking creation\");\n            // Use type assertion to satisfy TypeScript\n            const query = supabase.from(\"bookings\").insert([\n                {\n                    ...bookingData,\n                    created_at: new Date().toISOString()\n                }\n            ]);\n            console.log(\"Prepared insert query for bookings table\");\n            try {\n                const { data, error } = await query.select();\n                if (error) {\n                    console.error(\"Supabase error details:\", {\n                        code: error.code,\n                        message: error.message,\n                        details: error.details,\n                        hint: error.hint\n                    });\n                    throw error;\n                }\n                console.log(\"Booking created successfully:\", data);\n                return data[0];\n            } catch (queryError) {\n                console.error(\"Supabase query execution error:\", queryError);\n                throw queryError;\n            }\n        } else {\n            // For mock implementation, create a fake ID and return the booking\n            console.log(\"Using mock implementation for booking creation\");\n            const newBooking = {\n                ...bookingData,\n                id: \"mock-\".concat(Date.now()),\n                created_at: new Date().toISOString()\n            };\n            mockBookings.push(newBooking);\n            console.log(\"Mock booking created:\", newBooking);\n            return newBooking;\n        }\n    } catch (error) {\n        console.error(\"Error creating booking:\", error);\n        throw error;\n    }\n}\n// Helper function to check villa availability\nasync function checkVillaAvailability(villaId, checkIn, checkOut) {\n    try {\n        // For Supabase client\n        if (supabaseClient) {\n            // Use type assertion to satisfy TypeScript\n            const query = supabase.from(\"bookings\").select(\"*\");\n            const { data, error } = await query.eq(\"villa_id\", villaId).eq(\"status\", \"confirmed\");\n            if (error) {\n                console.error(\"Error checking availability:\", error);\n                return false;\n            }\n            // If there are no bookings for this villa, it's available\n            if (!data || data.length === 0) {\n                return true;\n            }\n            // Check if there are any overlapping bookings\n            const bookings = data;\n            const hasOverlap = bookings.some((booking)=>{\n                const bookingStart = new Date(booking.check_in).getTime();\n                const bookingEnd = new Date(booking.check_out).getTime();\n                const requestStart = new Date(checkIn).getTime();\n                const requestEnd = new Date(checkOut).getTime();\n                return requestStart <= bookingEnd && requestEnd >= bookingStart;\n            });\n            // If there are no overlapping bookings, the villa is available\n            return !hasOverlap;\n        } else {\n            // Filter bookings manually for the mock implementation\n            const confirmedBookings = mockBookings.filter((booking)=>booking.villa_id === villaId && booking.status === \"confirmed\");\n            if (confirmedBookings.length === 0) {\n                return true;\n            }\n            // Check for overlapping bookings\n            const hasOverlap = confirmedBookings.some((booking)=>{\n                const bookingStart = new Date(booking.check_in).getTime();\n                const bookingEnd = new Date(booking.check_out).getTime();\n                const requestStart = new Date(checkIn).getTime();\n                const requestEnd = new Date(checkOut).getTime();\n                return requestStart <= bookingEnd && requestEnd >= bookingStart;\n            });\n            return !hasOverlap;\n        }\n    } catch (error) {\n        console.error(\"Error checking availability:\", error);\n        return false;\n    }\n}\n// Attempt to load mock data from public URL\nconst loadMockData = async ()=>{\n    try {\n        // In a real app, you would fetch this from an API endpoint\n        // For now, we'll just use some hardcoded data\n        mockVillas = [\n            {\n                id: \"550e8400-e29b-41d4-a716-446655440000\",\n                name: \"Luxury Beachfront Villa\",\n                description: \"Experience the ultimate luxury getaway at our stunning beachfront villa. Nestled on the pristine shores of a private beach, this exquisite property offers breathtaking ocean views from every angle.\",\n                short_description: \"Stunning beachfront villa with private pool, direct beach access, and breathtaking ocean views.\",\n                location: \"Malibu, California\",\n                price: 1200.00,\n                bedrooms: 5,\n                bathrooms: 6,\n                max_guests: 12,\n                images: [\n                    \"/images/villa-exterior.jpg\",\n                    \"/images/villa-interior-1.jpg\",\n                    \"/images/villa-interior-2.jpg\",\n                    \"/images/villa-bedroom.jpg\",\n                    \"/images/villa-bathroom.jpg\",\n                    \"/images/villa-pool.jpg\",\n                    \"/images/villa-beach.jpg\",\n                    \"/images/villa-dining.jpg\"\n                ],\n                amenities: [\n                    \"Private Pool\",\n                    \"Direct Beach Access\",\n                    \"Ocean View\",\n                    \"Fully Equipped Kitchen\",\n                    \"Air Conditioning\",\n                    \"Free WiFi\",\n                    \"Smart TV\",\n                    \"Outdoor Dining Area\",\n                    \"BBQ Grill\",\n                    \"Parking\",\n                    \"Gym\",\n                    \"Home Theater\",\n                    \"Laundry Facilities\",\n                    \"24/7 Security\",\n                    \"Concierge Service\"\n                ],\n                created_at: new Date().toISOString()\n            }\n        ];\n        mockBookings = [];\n        console.log(\"Mock data loaded successfully\");\n    } catch (error) {\n        console.error(\"Error loading mock data:\", error);\n    }\n};\n// Load mock data on initialization\nif ( true && (!supabaseUrl || !supabaseKey)) {\n    loadMockData();\n}\n// Helper function to test Supabase connection\nasync function testSupabaseConnection() {\n    try {\n        console.log(\"Testing Supabase connection...\");\n        if (supabaseClient) {\n            // Use actual Supabase client\n            const { data, error } = await supabaseClient.from(\"villas\").select(\"id, name\").limit(1);\n            if (error) {\n                console.error(\"Supabase connection test failed:\", error);\n                return {\n                    success: false,\n                    error: error.message\n                };\n            }\n            console.log(\"Supabase connection successful:\", data);\n            return {\n                success: true,\n                data\n            };\n        } else {\n            // Using mock implementation\n            console.warn(\"Supabase client not initialized, using mock data\");\n            return {\n                success: false,\n                error: \"Supabase client not initialized\"\n            };\n        }\n    } catch (error) {\n        console.error(\"Error testing Supabase connection:\", error);\n        return {\n            success: false,\n            error: String(error)\n        };\n    }\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./utils/supabase.ts\n"));

/***/ })

});