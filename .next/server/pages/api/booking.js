"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/api/booking";
exports.ids = ["pages/api/booking"];
exports.modules = {

/***/ "@supabase/supabase-js":
/*!****************************************!*\
  !*** external "@supabase/supabase-js" ***!
  \****************************************/
/***/ ((module) => {

module.exports = require("@supabase/supabase-js");

/***/ }),

/***/ "next/dist/compiled/next-server/pages-api.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/pages-api.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/pages-api.runtime.dev.js");

/***/ }),

/***/ "(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fbooking&preferredRegion=&absolutePagePath=.%2Fpages%2Fapi%2Fbooking.ts&middlewareConfigBase64=e30%3D!":
/*!********************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fbooking&preferredRegion=&absolutePagePath=.%2Fpages%2Fapi%2Fbooking.ts&middlewareConfigBase64=e30%3D! ***!
  \********************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   config: () => (/* binding */ config),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   routeModule: () => (/* binding */ routeModule)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/pages-api/module.compiled */ \"(api)/./node_modules/next/dist/server/future/route-modules/pages-api/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(api)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/build/templates/helpers */ \"(api)/./node_modules/next/dist/build/templates/helpers.js\");\n/* harmony import */ var _pages_api_booking_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./pages/api/booking.ts */ \"(api)/./pages/api/booking.ts\");\n\n\n\n// Import the userland code.\n\n// Re-export the handler (should be the default export).\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_api_booking_ts__WEBPACK_IMPORTED_MODULE_3__, \"default\"));\n// Re-export config.\nconst config = (0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_api_booking_ts__WEBPACK_IMPORTED_MODULE_3__, \"config\");\n// Create and export the route module that will be consumed.\nconst routeModule = new next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__.PagesAPIRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.PAGES_API,\n        page: \"/api/booking\",\n        pathname: \"/api/booking\",\n        // The following aren't used in production.\n        bundlePath: \"\",\n        filename: \"\"\n    },\n    userland: _pages_api_booking_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n\n//# sourceMappingURL=pages-api.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LXJvdXRlLWxvYWRlci9pbmRleC5qcz9raW5kPVBBR0VTX0FQSSZwYWdlPSUyRmFwaSUyRmJvb2tpbmcmcHJlZmVycmVkUmVnaW9uPSZhYnNvbHV0ZVBhZ2VQYXRoPS4lMkZwYWdlcyUyRmFwaSUyRmJvb2tpbmcudHMmbWlkZGxld2FyZUNvbmZpZ0Jhc2U2ND1lMzAlM0QhIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQXNHO0FBQ3ZDO0FBQ0w7QUFDMUQ7QUFDbUQ7QUFDbkQ7QUFDQSxpRUFBZSx3RUFBSyxDQUFDLGtEQUFRLFlBQVksRUFBQztBQUMxQztBQUNPLGVBQWUsd0VBQUssQ0FBQyxrREFBUTtBQUNwQztBQUNPLHdCQUF3QixnSEFBbUI7QUFDbEQ7QUFDQSxjQUFjLHlFQUFTO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsWUFBWTtBQUNaLENBQUM7O0FBRUQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly92aWxsYS1ib29raW5nLz85MjdlIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFBhZ2VzQVBJUm91dGVNb2R1bGUgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9mdXR1cmUvcm91dGUtbW9kdWxlcy9wYWdlcy1hcGkvbW9kdWxlLmNvbXBpbGVkXCI7XG5pbXBvcnQgeyBSb3V0ZUtpbmQgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9mdXR1cmUvcm91dGUta2luZFwiO1xuaW1wb3J0IHsgaG9pc3QgfSBmcm9tIFwibmV4dC9kaXN0L2J1aWxkL3RlbXBsYXRlcy9oZWxwZXJzXCI7XG4vLyBJbXBvcnQgdGhlIHVzZXJsYW5kIGNvZGUuXG5pbXBvcnQgKiBhcyB1c2VybGFuZCBmcm9tIFwiLi9wYWdlcy9hcGkvYm9va2luZy50c1wiO1xuLy8gUmUtZXhwb3J0IHRoZSBoYW5kbGVyIChzaG91bGQgYmUgdGhlIGRlZmF1bHQgZXhwb3J0KS5cbmV4cG9ydCBkZWZhdWx0IGhvaXN0KHVzZXJsYW5kLCBcImRlZmF1bHRcIik7XG4vLyBSZS1leHBvcnQgY29uZmlnLlxuZXhwb3J0IGNvbnN0IGNvbmZpZyA9IGhvaXN0KHVzZXJsYW5kLCBcImNvbmZpZ1wiKTtcbi8vIENyZWF0ZSBhbmQgZXhwb3J0IHRoZSByb3V0ZSBtb2R1bGUgdGhhdCB3aWxsIGJlIGNvbnN1bWVkLlxuZXhwb3J0IGNvbnN0IHJvdXRlTW9kdWxlID0gbmV3IFBhZ2VzQVBJUm91dGVNb2R1bGUoe1xuICAgIGRlZmluaXRpb246IHtcbiAgICAgICAga2luZDogUm91dGVLaW5kLlBBR0VTX0FQSSxcbiAgICAgICAgcGFnZTogXCIvYXBpL2Jvb2tpbmdcIixcbiAgICAgICAgcGF0aG5hbWU6IFwiL2FwaS9ib29raW5nXCIsXG4gICAgICAgIC8vIFRoZSBmb2xsb3dpbmcgYXJlbid0IHVzZWQgaW4gcHJvZHVjdGlvbi5cbiAgICAgICAgYnVuZGxlUGF0aDogXCJcIixcbiAgICAgICAgZmlsZW5hbWU6IFwiXCJcbiAgICB9LFxuICAgIHVzZXJsYW5kXG59KTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cGFnZXMtYXBpLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fbooking&preferredRegion=&absolutePagePath=.%2Fpages%2Fapi%2Fbooking.ts&middlewareConfigBase64=e30%3D!\n");

/***/ }),

/***/ "(api)/./pages/api/booking.ts":
/*!******************************!*\
  !*** ./pages/api/booking.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ handler)\n/* harmony export */ });\n/* harmony import */ var _utils_supabase__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/supabase */ \"(api)/./utils/supabase.ts\");\n\n// Remove duplicate client creation - we'll use getSupabaseClient instead\n// which handles service key vs anon key appropriately\nasync function processPayment(amount) {\n    try {\n        // In a real app, you'd call your payment processor (Stripe, etc.)\n        // For now, we'll just generate a mock payment ID\n        await new Promise((resolve)=>setTimeout(resolve, 500)); // Simulate processing time\n        return `pay_${Date.now()}_${Math.random().toString(36).substring(2, 8)}`;\n    } catch (error) {\n        console.error(\"Payment processing error:\", error);\n        throw new Error(\"Payment processing failed\");\n    }\n}\nasync function handler(req, res) {\n    // Get the admin client with service role for higher permissions\n    const supabase = (0,_utils_supabase__WEBPACK_IMPORTED_MODULE_0__.getSupabaseClient)(true); // Pass true to get admin client\n    // Only allow POST requests\n    if (req.method !== \"POST\") {\n        res.setHeader(\"Allow\", [\n            \"POST\"\n        ]);\n        return res.status(405).end(`Method ${req.method} Not Allowed`);\n    }\n    try {\n        const bookingData = req.body;\n        // Log the received data for debugging\n        console.log(\"API received booking data:\", bookingData);\n        // Validate required fields\n        const requiredFields = [\n            \"first_name\",\n            \"last_name\",\n            \"email\",\n            \"phone\",\n            \"check_in\",\n            \"check_out\",\n            \"guests\",\n            \"villa_id\",\n            \"total_amount\"\n        ];\n        const missingFields = requiredFields.filter((field)=>!bookingData[field]);\n        if (missingFields.length > 0) {\n            return res.status(400).json({\n                success: false,\n                error: `Missing required fields: ${missingFields.join(\", \")}`\n            });\n        }\n        // 1. Process payment first\n        console.log(\"Processing payment for amount:\", bookingData.total_amount);\n        let paymentId;\n        try {\n            paymentId = await processPayment(bookingData.total_amount);\n            console.log(\"Payment processed successfully:\", paymentId);\n        } catch (paymentError) {\n            console.error(\"Payment processing failed:\", paymentError);\n            return res.status(400).json({\n                success: false,\n                error: \"Payment processing failed\",\n                details: paymentError instanceof Error ? paymentError.message : String(paymentError)\n            });\n        }\n        // 2. If payment is successful, create booking\n        const bookingWithPayment = {\n            ...bookingData,\n            payment_id: paymentId,\n            status: \"confirmed\"\n        };\n        console.log(\"Creating booking with payment ID:\", paymentId);\n        try {\n            // Pass the admin client to ensure it uses the service role\n            const booking = await (0,_utils_supabase__WEBPACK_IMPORTED_MODULE_0__.createBooking)(bookingWithPayment, supabase);\n            // Return success response\n            return res.status(201).json({\n                success: true,\n                booking,\n                payment: {\n                    id: paymentId,\n                    amount: bookingData.total_amount,\n                    status: \"completed\"\n                },\n                message: \"Booking created successfully\"\n            });\n        } catch (bookingError) {\n            console.error(\"Error creating booking after payment:\", bookingError);\n            return res.status(500).json({\n                success: false,\n                error: \"Failed to create booking after successful payment\",\n                payment_id: paymentId,\n                details: bookingError instanceof Error ? bookingError.message : String(bookingError)\n            });\n        }\n    } catch (error) {\n        console.error(\"Error creating booking:\", error);\n        return res.status(500).json({\n            success: false,\n            error: error instanceof Error ? error.message : \"An unknown error occurred\"\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./pages/api/booking.ts\n");

/***/ }),

/***/ "(api)/./utils/supabase.ts":
/*!***************************!*\
  !*** ./utils/supabase.ts ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   checkVillaAvailability: () => (/* binding */ checkVillaAvailability),\n/* harmony export */   createBooking: () => (/* binding */ createBooking),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   getSupabaseClient: () => (/* binding */ getSupabaseClient),\n/* harmony export */   getVillaById: () => (/* binding */ getVillaById),\n/* harmony export */   loadMockData: () => (/* binding */ loadMockData),\n/* harmony export */   testSupabaseConnection: () => (/* binding */ testSupabaseConnection)\n/* harmony export */ });\n/* harmony import */ var _supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @supabase/supabase-js */ \"@supabase/supabase-js\");\n/* harmony import */ var _supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__);\n\n// Mock data for fallback when Supabase isn't available\nlet mockVillas = [];\nlet mockBookings = [];\n// Supabase client initialization\nlet supabaseUrl = \"https://strvmujzcfzqaqoksnlh.supabase.co\";\nlet supabaseAnonKey = \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InN0cnZtdWp6Y2Z6cWFxb2tzbmxoIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDE4NTY3NDEsImV4cCI6MjA1NzQzMjc0MX0.JNKAXzQAHbk9uxrBITPoII_qk2TD5aLSwMtnk5fGzao\";\nlet supabaseServiceKey = process.env.SUPABASE_SERVICE_KEY;\nlet supabaseClient = null;\nlet supabaseAdminClient = null;\n// Log environment variables status\nconsole.log(\"Supabase environment variables status:\", {\n    urlExists: !!supabaseUrl,\n    anonKeyExists: !!supabaseAnonKey,\n    serviceKeyExists: !!supabaseServiceKey\n});\n// Attempt to initialize Supabase client with credentials\nif (supabaseUrl && supabaseAnonKey) {\n    try {\n        console.log(\"Initializing Supabase client with available credentials\");\n        supabaseClient = (0,_supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__.createClient)(supabaseUrl, supabaseAnonKey);\n        console.log(\"Supabase client initialized successfully\");\n    } catch (error) {\n        console.error(\"Failed to initialize Supabase client:\", error);\n    }\n}\n// Attempt to initialize admin client in server-side code\nif ( true && supabaseUrl && supabaseServiceKey) {\n    try {\n        console.log(\"Initializing Supabase admin client\");\n        supabaseAdminClient = (0,_supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__.createClient)(supabaseUrl, supabaseServiceKey, {\n            auth: {\n                autoRefreshToken: false,\n                persistSession: false\n            }\n        });\n        console.log(\"Supabase admin client initialized successfully\");\n    } catch (error) {\n        console.error(\"Failed to initialize Supabase admin client:\", error);\n    }\n}\n// Function to create a mock Supabase client\nfunction createMockClient() {\n    console.warn(\"Creating mock Supabase client\");\n    return {\n        from: (table)=>{\n            return {\n                select: (columns = \"*\")=>{\n                    console.log(`Mock SELECT ${columns} FROM ${table}`);\n                    const mockResult = {\n                        data: table === \"villas\" ? mockVillas : mockBookings,\n                        error: null,\n                        // Add methods that are used in your codebase\n                        eq: function(column, value) {\n                            console.log(`Mock WHERE ${column} = ${value}`);\n                            let filtered = [];\n                            if (table === \"villas\") {\n                                filtered = mockVillas.filter((item)=>item[column] === value);\n                            } else if (table === \"bookings\") {\n                                filtered = mockBookings.filter((item)=>item[column] === value);\n                            }\n                            return {\n                                data: filtered,\n                                error: null,\n                                limit: function(n) {\n                                    console.log(`Mock LIMIT ${n}`);\n                                    return {\n                                        data: filtered.slice(0, n),\n                                        error: null,\n                                        single: function() {\n                                            return {\n                                                data: filtered.length > 0 ? filtered[0] : null,\n                                                error: filtered.length > 0 ? null : {\n                                                    message: \"Not found\"\n                                                }\n                                            };\n                                        }\n                                    };\n                                },\n                                single: function() {\n                                    return {\n                                        data: filtered.length > 0 ? filtered[0] : null,\n                                        error: filtered.length > 0 ? null : {\n                                            message: \"Not found\"\n                                        }\n                                    };\n                                }\n                            };\n                        },\n                        limit: function(n) {\n                            console.log(`Mock LIMIT ${n}`);\n                            const limitedData = (table === \"villas\" ? mockVillas : mockBookings).slice(0, n);\n                            return {\n                                data: limitedData,\n                                error: null\n                            };\n                        }\n                    };\n                    return mockResult;\n                },\n                insert: (data)=>{\n                    console.log(`Mock INSERT INTO ${table}`, data);\n                    const newItem = {\n                        id: `mock-${Date.now()}`,\n                        created_at: new Date().toISOString(),\n                        ...data\n                    };\n                    if (table === \"villas\") {\n                        mockVillas.push(newItem);\n                    } else if (table === \"bookings\") {\n                        mockBookings.push(newItem);\n                    } else if (table === \"transactions\") {\n                        // Handle transactions mock table\n                        console.log(\"Mock transaction created:\", newItem);\n                    }\n                    return {\n                        data: [\n                            newItem\n                        ],\n                        error: null,\n                        select: ()=>({\n                                data: [\n                                    newItem\n                                ],\n                                error: null\n                            })\n                    };\n                },\n                update: (data)=>{\n                    console.log(`Mock UPDATE ${table}`, data);\n                    return {\n                        eq: function(column, value) {\n                            console.log(`Mock WHERE ${column} = ${value}`);\n                            if (table === \"villas\") {\n                                const index = mockVillas.findIndex((item)=>item[column] === value);\n                                if (index !== -1) {\n                                    mockVillas[index] = {\n                                        ...mockVillas[index],\n                                        ...data\n                                    };\n                                    return {\n                                        data: mockVillas[index],\n                                        error: null\n                                    };\n                                }\n                            } else if (table === \"bookings\") {\n                                const index = mockBookings.findIndex((item)=>item[column] === value);\n                                if (index !== -1) {\n                                    mockBookings[index] = {\n                                        ...mockBookings[index],\n                                        ...data\n                                    };\n                                    return {\n                                        data: mockBookings[index],\n                                        error: null\n                                    };\n                                }\n                            }\n                            return {\n                                data: null,\n                                error: {\n                                    message: \"Item not found\"\n                                }\n                            };\n                        },\n                        match: ({ id })=>{\n                            console.log(`Mock WHERE id = ${id}`);\n                            if (table === \"villas\") {\n                                const index = mockVillas.findIndex((item)=>item.id === id);\n                                if (index !== -1) {\n                                    mockVillas[index] = {\n                                        ...mockVillas[index],\n                                        ...data\n                                    };\n                                    return {\n                                        data: mockVillas[index],\n                                        error: null\n                                    };\n                                }\n                            } else if (table === \"bookings\") {\n                                const index = mockBookings.findIndex((item)=>item.id === id);\n                                if (index !== -1) {\n                                    mockBookings[index] = {\n                                        ...mockBookings[index],\n                                        ...data\n                                    };\n                                    return {\n                                        data: mockBookings[index],\n                                        error: null\n                                    };\n                                }\n                            }\n                            return {\n                                data: null,\n                                error: {\n                                    message: \"Item not found\"\n                                }\n                            };\n                        }\n                    };\n                },\n                delete: ()=>{\n                    console.log(`Mock DELETE FROM ${table}`);\n                    return {\n                        match: ({ id })=>{\n                            console.log(`Mock WHERE id = ${id}`);\n                            if (table === \"villas\") {\n                                const index = mockVillas.findIndex((item)=>item.id === id);\n                                if (index !== -1) {\n                                    const deleted = mockVillas[index];\n                                    mockVillas.splice(index, 1);\n                                    return {\n                                        data: deleted,\n                                        error: null\n                                    };\n                                }\n                            } else if (table === \"bookings\") {\n                                const index = mockBookings.findIndex((item)=>item.id === id);\n                                if (index !== -1) {\n                                    const deleted = mockBookings[index];\n                                    mockBookings.splice(index, 1);\n                                    return {\n                                        data: deleted,\n                                        error: null\n                                    };\n                                }\n                            }\n                            return {\n                                data: null,\n                                error: {\n                                    message: \"Item not found\"\n                                }\n                            };\n                        }\n                    };\n                }\n            };\n        }\n    };\n}\n// Utility function to get the appropriate Supabase client\nconst getSupabaseClient = (admin = false)=>{\n    // For admin operations (from API routes), use admin client if available\n    if (admin && supabaseAdminClient) {\n        console.log(\"Using Supabase admin client\");\n        return supabaseAdminClient;\n    }\n    // For normal operations, use the regular client if available\n    if (supabaseClient) {\n        console.log(\"Using Supabase anon client\");\n        return supabaseClient;\n    }\n    // If no client is available, log warning and return mock client\n    console.warn(\"No Supabase client available, using mock implementation\");\n    return createMockClient();\n};\n// Export default client for convenience\nconst supabase = getSupabaseClient();\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (supabase);\n// Helper function to fetch a villa by ID\nasync function getVillaById(id) {\n    try {\n        const client = getSupabaseClient();\n        console.log(`Fetching villa with ID: ${id}`);\n        const { data, error } = await client.from(\"villas\").select(\"*\").eq(\"id\", id).single();\n        if (error) {\n            console.error(\"Error fetching villa:\", error);\n            return null;\n        }\n        return data;\n    } catch (error) {\n        console.error(\"Error fetching villa:\", error);\n        return null;\n    }\n}\n// Helper function to create a new booking with improved error handling\nasync function createBooking(bookingData, client = null) {\n    try {\n        // Use provided client or get the default one\n        const supabase = client || getSupabaseClient(\"undefined\" === \"undefined\");\n        console.log(\"Creating booking with client type:\", client ? \"provided client\" :  true ? \"server-side client\" : 0);\n        console.log(\"Submitting booking data to Supabase:\", bookingData);\n        // Begin by checking if we have a valid UUID for villa_id\n        let villaId = bookingData.villa_id;\n        // If villa_id is not a valid UUID, try to get the first villa from the database\n        if (!isValidUUID(villaId)) {\n            console.log(\"villa_id is not a valid UUID, attempting to find a valid villa\");\n            try {\n                const { data: villas, error } = await supabase.from(\"villas\").select(\"id\").limit(1);\n                if (error) {\n                    console.error(\"Error finding valid villa:\", error);\n                    throw new Error(`Failed to find a valid villa: ${error.message}`);\n                }\n                if (villas && villas.length > 0) {\n                    villaId = villas[0].id;\n                    console.log(\"Found valid villa ID:\", villaId);\n                } else {\n                    // If no villas exist, create a test villa\n                    console.log(\"No villas found, creating a test villa\");\n                    const { data: newVilla, error: villaError } = await supabase.from(\"villas\").insert([\n                        {\n                            name: \"Test Villa\",\n                            description: \"Test villa created during booking\",\n                            short_description: \"Test villa\",\n                            location: \"Test location\",\n                            price: bookingData.total_amount / 2,\n                            bedrooms: 3,\n                            bathrooms: 2,\n                            max_guests: bookingData.guests,\n                            images: [],\n                            amenities: []\n                        }\n                    ]).select();\n                    if (villaError) {\n                        console.error(\"Error creating test villa:\", villaError);\n                        throw new Error(`Failed to create test villa: ${villaError.message}`);\n                    }\n                    if (newVilla && newVilla.length > 0) {\n                        villaId = newVilla[0].id;\n                        console.log(\"Created test villa with ID:\", villaId);\n                    } else {\n                        throw new Error(\"Failed to create test villa\");\n                    }\n                }\n            } catch (err) {\n                console.error(\"Error during villa lookup:\", err);\n                // Fall back to using the original villa_id\n                console.log(\"Falling back to original villa_id:\", villaId);\n            }\n        }\n        // First, create a transaction record\n        console.log(\"Creating transaction record\");\n        const { data: transaction, error: transactionError } = await supabase.from(\"transactions\").insert([\n            {\n                payment_id: bookingData.payment_id,\n                amount: bookingData.total_amount,\n                status: \"completed\",\n                payment_method: \"credit_card\",\n                payment_details: {\n                    source: \"direct_booking\"\n                }\n            }\n        ]).select();\n        if (transactionError) {\n            console.error(\"Error creating transaction:\", transactionError);\n            throw transactionError;\n        }\n        console.log(\"Transaction created successfully:\", transaction);\n        // Check if bookings table has payment_id column\n        let hasPaymentIdColumn = true;\n        try {\n            // Try a test insert with payment_id to check if it exists\n            const testInsert = {\n                villa_id: villaId,\n                check_in: bookingData.check_in,\n                check_out: bookingData.check_out,\n                guests: bookingData.guests,\n                first_name: \"test\",\n                last_name: \"user\",\n                email: \"test@example.com\",\n                phone: \"1234567890\",\n                total_amount: 1,\n                status: \"cancelled\",\n                payment_id: \"test\"\n            };\n            const { error: testError } = await supabase.from(\"bookings\").insert([\n                testInsert\n            ]);\n            if (testError && testError.message.includes(\"payment_id\")) {\n                console.log(\"payment_id column does not exist in bookings table\");\n                hasPaymentIdColumn = false;\n            }\n            // Delete the test booking\n            await supabase.from(\"bookings\").delete().eq(\"email\", \"test@example.com\").eq(\"status\", \"cancelled\");\n        } catch (testError) {\n            console.log(\"Error testing payment_id column:\", testError);\n            // Assume it doesn't exist to be safe\n            hasPaymentIdColumn = false;\n        }\n        // Now create the booking with or without payment_id\n        console.log(\"Creating booking record\");\n        let bookingInsert = {\n            villa_id: villaId,\n            check_in: bookingData.check_in,\n            check_out: bookingData.check_out,\n            guests: bookingData.guests,\n            first_name: bookingData.first_name,\n            last_name: bookingData.last_name,\n            email: bookingData.email,\n            phone: bookingData.phone,\n            special_requests: bookingData.special_requests,\n            total_amount: bookingData.total_amount,\n            status: \"confirmed\"\n        };\n        // Only include payment_id if the column exists\n        if (hasPaymentIdColumn) {\n            bookingInsert.payment_id = bookingData.payment_id;\n        }\n        const { data: booking, error: bookingError } = await supabase.from(\"bookings\").insert([\n            bookingInsert\n        ]).select();\n        if (bookingError) {\n            console.error(\"Error creating booking:\", bookingError);\n            // If the error mentions payment_id, try again without it\n            if (hasPaymentIdColumn && bookingError.message.includes(\"payment_id\")) {\n                console.log(\"Retrying without payment_id\");\n                delete bookingInsert.payment_id;\n                const { data: retryBooking, error: retryError } = await supabase.from(\"bookings\").insert([\n                    bookingInsert\n                ]).select();\n                if (retryError) {\n                    console.error(\"Retry also failed:\", retryError);\n                    throw retryError;\n                }\n                console.log(\"Booking created successfully on retry:\", retryBooking);\n                return retryBooking ? retryBooking[0] : null;\n            }\n            throw bookingError;\n        }\n        console.log(\"Booking created successfully:\", booking);\n        // Update transaction with booking_id\n        if (booking && booking.length > 0 && transaction && transaction.length > 0) {\n            console.log(`Updating transaction ${transaction[0].id} with booking ID ${booking[0].id}`);\n            const { error: updateError } = await supabase.from(\"transactions\").update({\n                booking_id: booking[0].id\n            }).eq(\"id\", transaction[0].id);\n            if (updateError) {\n                console.warn(\"Warning: Could not update transaction with booking ID:\", updateError);\n            }\n        }\n        return booking ? booking[0] : null;\n    } catch (error) {\n        console.error(\"Error in createBooking:\", error);\n        throw error;\n    }\n}\n// Helper function to check if a string is a valid UUID\nfunction isValidUUID(str) {\n    if (!str) return false;\n    // Simple UUID validation regex\n    const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i;\n    return uuidRegex.test(str);\n}\n// Helper function to check villa availability\nasync function checkVillaAvailability(villaId, checkIn, checkOut) {\n    try {\n        // Get client and log action\n        const supabaseClient = getSupabaseClient();\n        console.log(`Checking availability for villa ${villaId} from ${checkIn} to ${checkOut}`);\n        // This is a simplified implementation that works with TypeScript\n        // Create a query first to workaround TypeScript issues\n        const query = supabaseClient.from(\"bookings\").select(\"*\");\n        // @ts-ignore - Ignore TypeScript errors for the next part\n        const { data, error } = await query// @ts-ignore\n        .eq(\"villa_id\", villaId)// @ts-ignore\n        .eq(\"status\", \"confirmed\");\n        if (error) {\n            console.error(\"Error checking availability:\", error);\n            return false;\n        }\n        // If there are no bookings, villa is available\n        if (!data || data.length === 0) {\n            return true;\n        }\n        // Convert dates to timestamps for comparison\n        const requestStart = new Date(checkIn).getTime();\n        const requestEnd = new Date(checkOut).getTime();\n        // Check for overlapping bookings\n        const hasConflict = data.some((booking)=>{\n            const bookingStart = new Date(booking.check_in).getTime();\n            const bookingEnd = new Date(booking.check_out).getTime();\n            // Check if date ranges overlap\n            return requestStart <= bookingEnd && requestEnd >= bookingStart;\n        });\n        // Return availability (true if no conflict)\n        return !hasConflict;\n    } catch (error) {\n        console.error(\"Error checking villa availability:\", error);\n        return false; // Assume unavailable on error\n    }\n}\n// Load mock data if needed\nconst loadMockData = async ()=>{\n    try {\n        // In a real app, you would fetch this from an API endpoint\n        // For now, we'll just use some hardcoded data\n        mockVillas = [\n            {\n                id: \"550e8400-e29b-41d4-a716-446655440000\",\n                name: \"Luxury Beachfront Villa\",\n                description: \"Experience the ultimate luxury getaway at our stunning beachfront villa. Nestled on the pristine shores of a private beach, this exquisite property offers breathtaking ocean views from every angle.\",\n                short_description: \"Stunning beachfront villa with private pool, direct beach access, and breathtaking ocean views.\",\n                location: \"Malibu, California\",\n                price: 1200.00,\n                bedrooms: 5,\n                bathrooms: 6,\n                max_guests: 12,\n                images: [\n                    \"/images/villa-exterior.jpg\",\n                    \"/images/villa-interior-1.jpg\",\n                    \"/images/villa-interior-2.jpg\",\n                    \"/images/villa-bedroom.jpg\",\n                    \"/images/villa-bathroom.jpg\",\n                    \"/images/villa-pool.jpg\",\n                    \"/images/villa-beach.jpg\",\n                    \"/images/villa-dining.jpg\"\n                ],\n                amenities: [\n                    \"Private Pool\",\n                    \"Direct Beach Access\",\n                    \"Ocean View\",\n                    \"Fully Equipped Kitchen\",\n                    \"Air Conditioning\",\n                    \"Free WiFi\",\n                    \"Smart TV\",\n                    \"Outdoor Dining Area\",\n                    \"BBQ Grill\",\n                    \"Parking\",\n                    \"Gym\",\n                    \"Home Theater\",\n                    \"Laundry Facilities\",\n                    \"24/7 Security\",\n                    \"Concierge Service\"\n                ],\n                created_at: new Date().toISOString()\n            }\n        ];\n        mockBookings = [];\n        console.log(\"Mock data loaded successfully\");\n    } catch (error) {\n        console.error(\"Error loading mock data:\", error);\n    }\n};\n// Load mock data on initialization if needed\nif (false) {}\n// Helper function to test Supabase connection\nasync function testSupabaseConnection() {\n    try {\n        console.log(\"Testing Supabase connection...\");\n        const client = getSupabaseClient();\n        // Try a simple query to check connection\n        const { data, error } = await client.from(\"villas\").select(\"id, name\").limit(1);\n        if (error) {\n            console.error(\"Supabase connection test failed:\", error);\n            return {\n                success: false,\n                error: error.message,\n                details: error,\n                clientType: client === supabaseClient ? \"anon\" : client === supabaseAdminClient ? \"admin\" : \"mock\"\n            };\n        }\n        console.log(\"Supabase connection successful:\", data);\n        return {\n            success: true,\n            data,\n            clientType: client === supabaseClient ? \"anon\" : client === supabaseAdminClient ? \"admin\" : \"mock\"\n        };\n    } catch (error) {\n        console.error(\"Error testing Supabase connection:\", error);\n        return {\n            success: false,\n            error: String(error),\n            clientType: \"unknown\"\n        };\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./utils/supabase.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../webpack-api-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next"], () => (__webpack_exec__("(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fbooking&preferredRegion=&absolutePagePath=.%2Fpages%2Fapi%2Fbooking.ts&middlewareConfigBase64=e30%3D!")));
module.exports = __webpack_exports__;

})();